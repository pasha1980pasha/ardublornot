import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import speech_recognition as sr
import threading
import pyperclip
import time
import pyautogui
import keyboard
from ahk import AHK

class SmartInstantVoiceNotepad:
    def __init__(self, root):
        self.root = root
        self.root.title("üé§ –ê–†–î–£ –ë–õ–û–ö–ù–û–¢")
        self.root.geometry("900x650")
        self.root.configure(bg='#2c3e50')  # –¢–µ–º–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞
        
        self.recognizer = sr.Recognizer()
        self.listening = False
        self.current_text = ""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AHK –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
        self.ahk = AHK()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É F12
        try:
            keyboard.add_hotkey('f12', self.paste_text_global)
            print("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏—à–∞ F12 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ F12: {e}")
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å F12: {str(e)}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
        self.recognizer.energy_threshold = 300
        self.recognizer.dynamic_energy_threshold = True
        self.recognizer.pause_threshold = 1.0  # –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é
        
        # –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        style = ttk.Style()
        style.configure('Start.TButton', font=('Arial', 10, 'bold'), padding=8, background='#e74c3c', foreground='white')
        style.configure('Clear.TButton', font=('Arial', 10, 'bold'), padding=8, background='#f39c12', foreground='white')
        style.configure('Copy.TButton', font=('Arial', 10, 'bold'), padding=8, background='#27ae60', foreground='white')
        style.configure('Fix.TButton', font=('Arial', 10, 'bold'), padding=8, background='#9b59b6', foreground='white')
        style.configure('Title.TLabel', font=('Arial', 18, 'bold'), background='#2c3e50', foreground='white')
        style.configure('TFrame', background='#2c3e50')
        style.configure('TLabel', background='#2c3e50', foreground='white')
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(root, style='TFrame')
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_container, text="üé§ –ê–†–î–£ –ë–õ–û–ö–ù–û–¢", style='Title.TLabel')
        title_label.pack(pady=20)
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = ttk.Frame(main_container, style='TFrame')
        button_frame.pack(pady=15)
        
        # –ö–Ω–æ–ø–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        self.start_btn = ttk.Button(button_frame, text="üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", command=self.toggle_recording, style='Start.TButton')
        self.start_btn.pack(side=tk.LEFT, padx=8)
        
        self.clear_btn = ttk.Button(button_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_text, style='Clear.TButton')
        self.clear_btn.pack(side=tk.LEFT, padx=8)
        
        self.copy_btn = ttk.Button(button_frame, text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_to_clipboard, style='Copy.TButton')
        self.copy_btn.pack(side=tk.LEFT, padx=8)
        
        self.fix_btn = ttk.Button(button_frame, text="‚ú® –ò—Å–ø—Ä–∞–≤–∏—Ç—å", command=self.auto_correct, style='Fix.TButton')
        self.fix_btn.pack(side=tk.LEFT, padx=8)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
        self.record_indicator = ttk.Label(main_container, text="üî¥ –ù–ï –ó–ê–ü–ò–°–´–í–ê–ï–¢", 
                                        font=('Arial', 12, 'bold'), foreground='red')
        self.record_indicator.pack(pady=10)
        
        # –ú–µ—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        text_label = ttk.Label(main_container, text="–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", 
                             font=('Arial', 11, 'bold'), foreground='#ecf0f1')
        text_label.pack(pady=(15, 5), anchor=tk.W)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
        self.text_area = scrolledtext.ScrolledText(main_container, wrap=tk.WORD, width=100, height=18, 
                                                  font=('Arial', 11), bg='#34495e', fg='#ecf0f1', 
                                                  relief=tk.FLAT, bd=2, insertbackground='white')
        self.text_area.pack(pady=5, fill=tk.BOTH, expand=True)
        self.text_area.insert(tk.END, "–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ç–µ–∫—Å—Ç...\n\n")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ —Å—Ç–∏–ª—å–Ω–æ–π —Ä–∞–º–∫–µ
        instruction_frame = ttk.Frame(main_container, style='TFrame')
        instruction_frame.pack(pady=20, fill=tk.X)
        
        instruction_text = """üí° –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
1. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –∫—É—Ä—Å–æ—Ä –≤ –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ (—á–∞—Ç, Word, Excel, –±—Ä–∞—É–∑–µ—Ä).
2. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å' ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å.
3. üí• –¢–µ–∫—Å—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—Å—è —Ç—É–¥–∞, –≥–¥–µ –∫—É—Ä—Å–æ—Ä!
4. –ï—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é Ctrl+V.
5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ò—Å–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –∞–≤—Ç–æ-–ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –∏ '–û—á–∏—Å—Ç–∏—Ç—å' –¥–ª—è —Å–±—Ä–æ—Å–∞."""

        instruction = ttk.Label(instruction_frame, text=instruction_text, font=('Arial', 10), 
                               background='#34495e', foreground='#bdc3c7', wraplength=850, 
                               justify=tk.LEFT, padding=15)
        instruction.pack(fill=tk.X)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤–Ω–∏–∑—É)
        self.status_var = tk.StringVar()
        self.status_var.set("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å'")
        status_bar = ttk.Label(main_container, textvariable=self.status_var, relief=tk.SUNKEN, 
                              anchor=tk.W, background='#34495e', foreground='#ecf0f1')
        status_bar.pack(side=tk.BOTTOM, fill=tk.X, pady=(10, 0))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
        try:
            self.microphone = sr.Microphone(device_index=0)
            mic_list = sr.Microphone.list_microphone_names()
            if mic_list:
                self.status_var.set(f"‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω: {mic_list[0]}")
            else:
                self.microphone = None
                self.start_btn.config(state='disabled')
                self.status_var.set("‚ùå –ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        except Exception as e:
            self.microphone = None
            self.start_btn.config(state='disabled')
            self.status_var.set(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {str(e)}")

    def instant_paste(self, text):
        """–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä—è–º–æ –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ —á–µ—Ä–µ–∑ AutoHotKey"""
        try:
            self.ahk.type(text + " ")
            return True
        except Exception as e:
            try:
                # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: Ctrl+V —á–µ—Ä–µ–∑ pyautogui
                pyperclip.copy(text + " ")
                time.sleep(0.1)
                pyautogui.hotkey('ctrl', 'v')
                return True
            except Exception as e2:
                print(f"–û—à–∏–±–∫–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏: {e}, {e2}")
                return False

    def paste_text_global(self):
        """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è F12 ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –ª—é–±–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not hasattr(self, 'current_text') or not self.current_text.strip():
            return
        
        try:
            pyperclip.copy(self.current_text.strip())
            time.sleep(0.1)
            pyautogui.hotkey('ctrl', 'v')
            if self.root.winfo_exists():
                self.status_var.set("‚úÖ –¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω!")
        except Exception as e:
            if self.root.winfo_exists():
                self.status_var.set(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏: {str(e)}")

    def add_punctuation(self, text):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è"""
        text = text.lower().strip()
        
        punctuation_commands = {
            '—Ç–æ—á–∫–∞': '.', '—Ç–æ—á–∫—É': '.', '—Ç–æ—á–∫–∏': '.',
            '–∑–∞–ø—è—Ç–∞—è': ',', '–∑–∞–ø—è—Ç—É—é': ',', '–∑–∞–ø—è—Ç—ã–µ': ',',
            '–≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫': '!', '–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫': '?',
            '–¥–≤–æ–µ—Ç–æ—á–∏–µ': ':', '—Ç–∏—Ä–µ': ' - ', '–Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞': '\n',
            '–∫–∞–≤—ã—á–∫–∏': '"', '—Å–∫–æ–±–∫–∏': '()', '—Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π': ';'
        }
        
        for command, symbol in punctuation_commands.items():
            if command in text:
                return symbol
        
        question_words = {'–∫—Ç–æ', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∫–∞–∫', '—Å–∫–æ–ª—å–∫–æ', '—á–µ–π', '–∫–∞–∫–æ–π'}
        words = text.split()
        
        if len(words) > 0:
            if any(word in question_words for word in words[:2]):
                return '?'
            
            if any(word in {'–æ–≥–æ', '—É—Ö', '–∞—Ö', '–≤–∞—É', '–∑–¥–æ—Ä–æ–≤–æ'} for word in words):
                return '!'
            
            if len(words) > 6 and text[-1] not in {'.', '!', '?'}:
                return '.'
        
        return ''

    def auto_correct_text(self, text):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
        corrections = {
            '—Å–∫–æ–ø–∏—Ä–æ–∞–Ω–æ–æ': '—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ',
            '–ø—Ä–∏–≤–µ—Ç': '–ø—Ä–∏–≤–µ—Ç',
            '–∫–∞–∫–¥–µ–ª–∞': '–∫–∞–∫ –¥–µ–ª–∞',
            '—Å–ø–∞—Å–∏–±–æ': '—Å–ø–∞—Å–∏–±–æ',
            '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞': '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
            '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ': '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ',
            '–∏–∑–≤–∏–Ω–∏—Ç–µ': '–∏–∑–≤–∏–Ω–∏—Ç–µ',
            '—Ö–æ—Ä–æ—à–æ': '—Ö–æ—Ä–æ—à–æ',
            '–ø–ª–æ—Ö–æ': '–ø–ª–æ—Ö–æ',
            '–Ω–æ—Ä–º–∞–ª—å–Ω–æ': '–Ω–æ—Ä–º–∞–ª—å–Ω–æ',
            '—Ç—É—Ç': '—Ç—É—Ç',
            '–∑–¥–µ—Å—å': '–∑–¥–µ—Å—å',
            '–º–æ–∂–Ω–æ': '–º–æ–∂–Ω–æ',
            '–Ω–µ—Ç': '–Ω–µ—Ç',
            '–¥–∞': '–¥–∞',
        }
        
        for wrong, correct in corrections.items():
            text = text.replace(wrong, correct)
        
        return text

    def process_text(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        text = text.lower().strip()
        text = self.auto_correct_text(text)
        punctuation = self.add_punctuation(text)
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        for command in {'—Ç–æ—á–∫–∞', '–∑–∞–ø—è—Ç–∞—è', '–≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π', '–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π', 
                       '–¥–≤–æ–µ—Ç–æ—á–∏–µ', '—Ç–∏—Ä–µ', '–Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞', '–∫–∞–≤—ã—á–∫–∏', '—Å–∫–æ–±–∫–∏', '—Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π'}:
            text = text.replace(command, '')
        
        text = text.strip()
        
        if punctuation:
            if punctuation in {'.', '!', '?', ';', ':'}:
                return text + punctuation + ' '
            elif punctuation == ',':
                return text + punctuation + ' '
            elif punctuation == '\n':
                return text + '\n'
            else:
                return punctuation + text + ' '
        else:
            return text + ' '

    def toggle_recording(self):
        if not self.listening:
            self.start_listening()
        else:
            self.stop_listening()

    def start_listening(self):
        if self.microphone is None:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
            return
            
        self.listening = True
        self.start_btn.config(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
        self.record_indicator.config(text="üü¢ –ó–ê–ü–ò–°–¨ –ò–î–Å–¢... –ì–û–í–û–†–ò–¢–ï", foreground='green')
        self.status_var.set("üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞... –ì–æ–≤–æ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ!")
        
        self.thread = threading.Thread(target=self.continuous_listen)
        self.thread.daemon = True
        self.thread.start()

    def stop_listening(self):
        self.listening = False
        self.start_btn.config(text="üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å")
        self.record_indicator.config(text="üî¥ –ù–ï –ó–ê–ü–ò–°–´–í–ê–ï–¢", foreground='red')
        self.status_var.set("‚è∏Ô∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def continuous_listen(self):
        with self.microphone as source:
            self.recognizer.adjust_for_ambient_noise(source, duration=1)
            
            while self.listening:
                try:
                    audio = self.recognizer.listen(source, timeout=None, phrase_time_limit=8)
                    text = self.recognizer.recognize_google(audio, language="ru-RU")
                    
                    processed_text = self.process_text(text)
                    
                    # üî• –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –í–°–¢–ê–í–ö–ê ‚Äî –≥–ª–∞–≤–Ω–∞—è —Ñ–∏—á–∞!
                    if self.instant_paste(processed_text.strip()):
                        self.root.after(0, lambda: self.status_var.set(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ: {text}"))
                    else:
                        self.root.after(0, lambda: self.status_var.set("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+V"))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
                    self.root.after(0, self.update_text, processed_text)
                    
                except sr.WaitTimeoutError:
                    continue
                except sr.UnknownValueError:
                    self.root.after(0, lambda: self.status_var.set("‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞"))
                    continue
                except Exception as e:
                    self.root.after(0, lambda: self.status_var.set(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"))
                    time.sleep(1)

    def update_text(self, text):
        self.current_text += text
        self.text_area.delete(1.0, tk.END)
        self.text_area.insert(tk.END, self.current_text.capitalize())
        self.copy_to_clipboard()  # –ê–≤—Ç–æ–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.text_area.see(tk.END)

    def auto_correct(self):
        if not self.current_text.strip():
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏ —Ç–æ—á–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        text = self.current_text.strip()
        if text and text[0].islower():
            text = text[0].upper() + text[1:]
        
        if text and text[-1] not in {'.', '!', '?', ',', ';', ':'}:
            text = text + '.'
        
        self.current_text = text
        self.text_area.delete(1.0, tk.END)
        self.text_area.insert(tk.END, self.current_text)
        self.copy_to_clipboard()
        self.status_var.set("‚ú® –¢–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")

    def clear_text(self):
        self.current_text = ""
        self.text_area.delete(1.0, tk.END)
        pyperclip.copy("")
        self.status_var.set("üßπ –¢–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω")

    def copy_to_clipboard(self):
        if self.current_text.strip():
            pyperclip.copy(self.current_text.strip())
            self.status_var.set("üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")

    def on_closing(self):
        self.listening = False
        try:
            keyboard.remove_hotkey('f12')
        except:
            pass
        time.sleep(0.5)
        self.root.destroy()


if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    dependencies = [
        ("pyautogui", "pyautogui"),
        ("keyboard", "keyboard"),
        ("ahk", "ahk")
    ]
    
    for module_name, import_name in dependencies:
        try:
            __import__(import_name)
        except ImportError:
            print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {module_name}...")
            import subprocess
            subprocess.check_call(["pip", "install", module_name])
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    from ahk import AHK
    
    root = tk.Tk()
    app = SmartInstantVoiceNotepad(root)
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()
