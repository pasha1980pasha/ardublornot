import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import speech_recognition as sr
import threading
import pyperclip
import time
from ahk import AHK

class InstantVoiceNotepad:
    def __init__(self, root):
        self.root = root
        self.root.title("üé§ –ú–ì–ù–û–í–ï–ù–ù–´–ô –ì–û–õ–û–°–û–í–û–ô –ë–õ–û–ö–ù–û–¢")
        self.root.geometry("800x500")
        self.root.configure(bg='#f0f0f0')
        
        self.recognizer = sr.Recognizer()
        self.listening = False
        self.current_text = ""
        self.ahk = AHK()  # AutoHotKey –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
        self.recognizer.energy_threshold = 300
        self.recognizer.dynamic_energy_threshold = True
        self.recognizer.pause_threshold = 0.8  # –ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
        
        # –°—Ç–∏–ª—å
        style = ttk.Style()
        style.configure('TButton', font=('Arial', 10), padding=6)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(root, text="üé§ –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –í–°–¢–ê–í–ö–ê –ì–û–õ–û–°–ê", 
                               font=('Arial', 14, 'bold'), background='#f0f0f0')
        title_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏
        self.record_btn = ttk.Button(root, text="üé§ –ì–û–í–û–†–ò–¢–¨", command=self.toggle_recording,
                                   style='TButton')
        self.record_btn.pack(pady=10)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä
        self.status_var = tk.StringVar()
        self.status_var.set("‚úÖ –ù–∞–∂–º–∏—Ç–µ '–ì–û–í–û–†–ò–¢–¨' –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ –ø—Ä—è–º–æ –≤ –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ!")
        status_label = ttk.Label(root, textvariable=self.status_var, 
                                font=('Arial', 10), background='#f0f0f0')
        status_label.pack(pady=5)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        text_label = ttk.Label(root, text="–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", 
                              font=('Arial', 9, 'bold'), background='#f0f0f0')
        text_label.pack(pady=(20, 5))
        
        self.text_area = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=80, height=8, 
                                                  font=('Arial', 10), bg='white')
        self.text_area.pack(pady=5, padx=10)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction = ttk.Label(root, 
            text="üí° –ü–ï–†–ï–î –ù–ê–ñ–ê–¢–ò–ï–ú –ö–ù–û–ü–ö–ò:\n1. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –∫—É—Ä—Å–æ—Ä –≤ –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ (—á–∞—Ç, –¥–æ–∫—É–º–µ–Ω—Ç)\n2. –ù–∞–∂–º–∏—Ç–µ '–ì–û–í–û–†–ò–¢–¨'\n3. –ì–æ–≤–æ—Ä–∏—Ç–µ - —Ç–µ–∫—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –ø—Ä—è–º–æ —Ç–∞–º!",
            font=('Arial', 8), background='#e8f4f8', justify=tk.LEFT)
        instruction.pack(pady=10, padx=10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
        try:
            self.microphone = sr.Microphone(device_index=0)
        except:
            self.microphone = None
            self.record_btn.config(state='disabled')
            self.status_var.set("‚ùå –ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    def instant_paste(self, text):
        """–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä—è–º–æ –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AutoHotKey –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
            self.ahk.type(text)
            return True
        except Exception as e:
            try:
                # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                pyperclip.copy(text)
                time.sleep(0.1)
                self.ahk.send('^v')  # Ctrl+V —á–µ—Ä–µ–∑ AHK
                return True
            except:
                return False
    
    def toggle_recording(self):
        if not self.listening:
            self.start_listening()
        else:
            self.stop_listening()
    
    def start_listening(self):
        if self.microphone is None:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
            return
            
        self.listening = True
        self.record_btn.config(text="‚èπÔ∏è –û–°–¢–ê–ù–û–í–ò–¢–¨")
        self.status_var.set("üé§ –ó–∞–ø–∏—Å—å... –ì–û–í–û–†–ò–¢–ï –ø—Ä—è–º–æ –≤ –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ!")
        
        self.thread = threading.Thread(target=self.continuous_listen)
        self.thread.daemon = True
        self.thread.start()
    
    def stop_listening(self):
        self.listening = False
        self.record_btn.config(text="üé§ –ì–û–í–û–†–ò–¢–¨")
        self.status_var.set("‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏—Ç–µ '–ì–û–í–û–†–ò–¢–¨' –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏")
    
    def continuous_listen(self):
        with self.microphone as source:
            self.recognizer.adjust_for_ambient_noise(source, duration=0.5)
            
            while self.listening:
                try:
                    # –°–ª—É—à–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
                    audio = self.recognizer.listen(source, timeout=1, phrase_time_limit=3)
                    text = self.recognizer.recognize_google(audio, language="ru-RU")
                    
                    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç—É–¥–∞, –≥–¥–µ –∫—É—Ä—Å–æ—Ä
                    success = self.instant_paste(text + " ")
                    
                    if success:
                        self.root.after(0, self.update_display, text)
                        self.root.after(0, lambda: self.status_var.set(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ: {text}"))
                    else:
                        self.root.after(0, lambda: self.status_var.set("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏"))
                        
                except sr.WaitTimeoutError:
                    continue
                except sr.UnknownValueError:
                    continue
                except Exception as e:
                    self.root.after(0, lambda: self.status_var.set(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"))
                    time.sleep(1)
    
    def update_display(self, text):
        """–¢–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏"""
        self.current_text += text + " "
        self.text_area.delete(1.0, tk.END)
        self.text_area.insert(tk.END, self.current_text)
        self.text_area.see(tk.END)
    
    def on_closing(self):
        self.listening = False
        time.sleep(0.5)
        self.root.destroy()

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AHK –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    try:
        from ahk import AHK
    except ImportError:
        print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AutoHotKey...")
        import subprocess
        subprocess.check_call(["pip", "install", "ahk"])
        from ahk import AHK
    
    root = tk.Tk()
    app = InstantVoiceNotepad(root)
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()
